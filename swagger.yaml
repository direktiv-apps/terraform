swagger: "2.0"
info:
  description: Run Hashicorp Terrafrom from Direktiv
  title: terraform
  version: "1.0"
  x-direktiv-meta:
    container: gcr.io/direktiv/apps/terraform
    maintainer: |-
      [direktiv.io](https://www.direktiv.io) 
    issues: https://github.com/direktiv-apps/terraform/issues
    url: https://github.com/direktiv-apps/terraform  
    categories:
    - cloud
    - tools
    - infrastructure
    license: |-
      [Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)
    long-description: >-
      This function has [Terraform](https://www.terraform.io/) and the graphiz installed. Direktiv variables can be used to store and load the state. 
      The function can run `init` but accepts data prepared with `init` already. 
consumes:
- application/json
produces:
- application/json
schemes:
- http
paths:
  /: 
    delete:
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          description: |
            On cancel Direktiv sends a DELETE request to
            the action with id in the header
      x-direktiv:
        cancel: echo 'cancel {{ .DirektivActionID }}'
      responses:
        200:
    post:
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          description: |
            direktiv action id is an UUID. 
            For development it can be set to 'development'
        - name: Direktiv-TempDir
          in: header
          type: string
          description: |
            direktiv temp dir is the working directory for that request
            For development it can be set to e.g. '/tmp'
        - name: body
          in: body
          schema:
            type: object
            properties:
              commands:
                type: array
                description: Array of commands.
                items:
                  type: object
                  properties:
                    command:
                      type: string
                      description: Command to run
                      example: terraform version
                    silent: 
                      type: boolean
                      description: If set to false the command will not print output to logs.
                      default: false
                    print: 
                      type: boolean
                      description: If set to false the command will not print the full command with arguments to logs.
                      default: true
                    continue: 
                      type: boolean
                      description: Stops excecution if command fails, otherwise proceeds with next command 
              loglevel:
                type: string
                description: Terraform log level, default off
                default: "off"
              scope:
                type: string
                description: Scope where the log file is stored, default instance. Filename `tf.log`.
                default: instance
              variables:
                type: array
                description: Variables set for all commands. This translatyes into TF_VAR_* environment variables.
                example: 
                - name: instance_name
                  value: myinstance
                items:
                  type: object
                  properties:
                    name:
                      description: Name of the variable.
                      type: string
                    value:
                      description: Value of the variable.
                      type: string
                
      # direktiv code generation is configured here
      x-direktiv-function: |-
        functions:
          - id: terraform
            image: gcr.io/direktiv/apps/terraform:1.0
            type: knative-workflow
      x-direktiv-examples:
        - title: Basic
          content: |-
            - id: tf
                 type: action
                  action:
                    files:
                    # Contains all required .tf files after init. Can point to a plain text .tf file as well.
                    - scope: workflow
                      key: tf.tar.gz
                      as: out/workflow/tf
                      type: tar.gz
                    function: get
                    input: 
                      variables:
                      - name: name
                        value: MyName
                      commands:
                      - command: terraform -chdir=out/workflow/tf apply -no-color -auto-approve
                      - command: terraform -chdir=out/workflow/tf output -json
        - title: Example with Variables and Secrets
          content: |-
            - id: tf
                 type: action
                   action:
                    function: get
                    secrets: ["password"]
                    files:
                    - scope: workflow
                      key: main.tf
                    input: 
                      commands:
                      # Uses tfstate with a jq component. Can run same .tf file for different instances. 
                      - command: terraform apply -state=out/workflow/terraform-jq(.instance).tfstate -no-color -auto-approve
                      # returns state of the change and can be used in a switch later
                      - command: terraform plan -detailed-exitcode | echo $?
                      variables:
                      - name: instance_name
                        value: jq(.instance)
                      # Use of Direktiv secrets or fetch secrets earlier in the flow.
                      - password:
                        value: jq(.secrets.password)
        - title: Visualize
          content: |-
            - id: tf
                 type: action
                   action:
                    function: get
                    files:
                    - scope: workflow
                      key: main.tf
                    input: 
                      commands:
                      # return graph as base64
                      - command: bash -c 'terraform -chdir=out/workflow/tf graph | dot -Tpng | base64 -w0'
                      # store graph as Direktiv variable
                      - command: bash -c 'terraform graph | dot -Tpng > out/workflow/graph.png'
      x-direktiv:
        debug: true
        cmds:
        - action: foreach
          loop: .Commands
          exec: '{{ .Item.Command }}'
          silent: '{{ .Item.Silent }}'
          print: '{{ .Item.Print }}'
          continue: '{{ .Item.Continue }}'
          env: ["TF_IN_AUTOMATION=y", "TF_INPUT=0", 'TF_LOG={{ default "off" .Body.Loglevel }}', 'TF_LOG_PATH={{ .DirektivDir }}/out/{{ default "instance" .Body.Scope }}/tf.log']
          runtime-envs: |
            [
            {{- range $index, $element := .Body.Variables }}
            {{- if $index}},{{- end}}
            "TF_VAR_{{ $element.Name }}={{ $element.Value }}"
            {{- end }}
            ]
        output: |
          {
            "terraform": {{ index . 0 | toJson }}
          }
      x-direktiv-errors:
        io.direktiv.command.error: Command execution failed
        io.direktiv.output.error: Template error for output generation of the service
        io.direktiv.ri.error: Can not create information object from request
      responses:
        200:
          description: List of executed commands.
          examples:
            terraform:
            - result: VTQ3U....c2ZaN0FJaldjVnkra2tKV==
              success: true
            - result:
              format_version: "1.0"
              success: true
          schema:
            type: object
            properties:
              terraform:
                type: array
                items:
                  type: object
                  required:
                  - success
                  - result
                  properties:
                    success:
                      type: boolean
                    result:
                      additionalProperties: {}
        default:
          description: generic error response
          headers:
            Direktiv-ErrorCode:
              type: string
            Direktiv-ErrorMessage:
              type: string
          schema:
            $ref: "#/definitions/error"
definitions:
  direktivFile:
    type: object
    x-go-type:
      type: DirektivFile
      import:
        package: github.com/direktiv/apps/go/pkg/apps 
  error:
    type: object
    required:
      - errorCode
      - errorMessage
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
